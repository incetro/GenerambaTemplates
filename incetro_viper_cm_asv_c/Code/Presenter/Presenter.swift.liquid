{% include 'header' %}

import Foundation

// MARK: - {{ prefix }}{{ module_info.name }}Presenter

final class {{ prefix }}{{ module_info.name }}Presenter {
    
    // MARK: - Properties
    
    /// ModuleOutput instance
    weak var output: {{ prefix }}{{ module_info.name }}ModuleOutput?

    /// View instance
    weak var view: {{ prefix }}{{ module_info.name }}ViewInput?

    /// Interactor instance
    var interactor: {{ prefix }}{{ module_info.name }}InteractorInput?

    /// Router instance
    var router: {{ prefix }}{{ module_info.name }}RouterInput?
    
    /// {{ prefix }}{{ module_info.name }}ViewModelProtocol factory
    private let viewModelDesigner: {{ prefix }}{{ module_info.name }}ViewModelDesigner

    /// Current {{ custom_parameters.plain | downcase }} instance
    private lazy var {{ custom_parameters.plain | downcase }}: {{ custom_parameters.plain }}PlainObject = {
        interactor.unwrap().obtain{{ custom_parameters.plain }}()
    }()

    // MARK: - Initializers

    /// Default initializer
    ///
    /// - Parameter viewModelDesigner: {{ prefix }}{{ module_info.name }}ViewModelProtocol factory
    init(
        viewModelDesigner: {{ prefix }}{{ module_info.name }}ViewModelDesigner
    ) {
        self.viewModelDesigner = viewModelDesigner
    }
}

// MARK: - {{ prefix }}{{ module_info.name }}ViewOutput

extension {{ prefix }}{{ module_info.name }}Presenter: {{ prefix }}{{ module_info.name }}ViewOutput {
    
    func didTriggerViewReadyEvent() {
        view?.setupInitialState()
        let viewModel = viewModelDesigner.viewModel(from: {{ custom_parameters.plain | downcase }})
        view?.update(viewModel)
    }
}

// MARK: - {{ prefix }}{{ module_info.name }}InteractorOutput

extension {{ prefix }}{{ module_info.name }}Presenter: {{ prefix }}{{ module_info.name }}InteractorOutput {
    
    func processErrorMessage(_ errorMessage: String) {
        view?.stopIndication()
        view?.showErrorMessage(errorMessage)
    }
}

// MARK: - {{ prefix }}{{ module_info.name }}ModuleInput

extension {{ prefix }}{{ module_info.name }}Presenter: {{ prefix }}{{ module_info.name }}ModuleInput {
    
    func setModuleOutput(_ moduleOutput: ModuleOutput) {
        output = moduleOutput as? {{ prefix }}{{ module_info.name }}ModuleOutput
    }
}
