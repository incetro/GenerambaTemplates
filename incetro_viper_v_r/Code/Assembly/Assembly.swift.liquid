{% include 'header' %}

import UIKit
import Swinject

// MARK: - {{ prefix }}{{ module_info.name }}ModuleAssembly

final class {{ prefix }}{{ module_info.name }}ModuleAssembly: CollectableAssembly {

    required init() {

    }

    func obtainView(withTransitionHandler transitionHandler: TransitionHandler) -> {{ prefix }}{{ module_info.name }}View {
        return container.resolve({{ prefix }}{{ module_info.name }}View.self, argument: transitionHandler).unwrap()
    }

    // MARK: - Assembly
    
    func assemble(inContainer container: Container) {

        container.register({{ prefix }}{{ module_info.name }}View.self) { (resolver, transitionHandler: TransitionHandler) in
            let view = {{ prefix }}{{ module_info.name }}View()
            view.output = resolver.resolve({{ prefix }}{{ module_info.name }}ViewOutput.self, arguments: view as {{ prefix }}{{ module_info.name }}ViewInput, transitionHandler)
            return view
        }
        
        container.register({{ prefix }}{{ module_info.name }}RouterInput.self) { (resolver, transitionHandler: TransitionHandler) in
            let router = {{ prefix }}{{ module_info.name }}Router(transitionHandler: transitionHandler)
            return router
        }
        
        container.register({{ prefix }}{{ module_info.name }}ViewOutput.self) { (resolver, view: {{ prefix }}{{ module_info.name }}ViewInput, transitionHandler: TransitionHandler) in
            let presenter = {{ prefix }}{{ module_info.name }}Presenter()
            presenter.view = view
            presenter.router = resolver.resolve({{ prefix }}{{ module_info.name }}RouterInput.self, argument: transitionHandler)
            return presenter
        }.initCompleted { (resolver, viewOutput) in
            if let presenter = viewOutput as? {{ prefix }}{{ module_info.name }}Presenter {
                presenter.interactor = resolver.resolve({{ prefix }}{{ module_info.name }}InteractorInput.self, argument: presenter as {{ prefix }}{{ module_info.name }}InteractorOutput)
            }
        }
        
        container.register({{ prefix }}{{ module_info.name }}InteractorInput.self) { (resolver, interactorOutput: {{ prefix }}{{ module_info.name }}InteractorOutput) in
            let interactor = {{ prefix }}{{ module_info.name }}Interactor()
            interactor.output = interactorOutput
            return interactor
        }
    }
}