{% include 'header' %}

import UIKit

// MARK: - {{ prefix }}{{ module_info.name }}ContentManager

final class {{ prefix }}{{ module_info.name }}ContentManagerImplementation: NSObject, {{ prefix }}{{ module_info.name }}ContentManager {
    
    // MARK: - Properties
    
    /// {{ custom_parameters.cell }} controllers factory
    private let controllersFactory: {{ custom_parameters.cell }}CellPresenterFactory
    
    /// Current controllers which manipulates tableView's cells
    private var controllers: [{{ custom_parameters.cell }}CellPresenter] = []

    /// UITableView with {{ custom_parameters.cell }} cells
    var tableView: UITableView?
    
    // MARK: - Initializers

    /// Default initializer
    ///
    /// - Parameter controllersFactory: {{ cell_uncap }} controllers factory
    init(controllersFactory: {{ custom_parameters.cell }}CellPresenterFactory) {
        self.controllersFactory = controllersFactory
        super.init()
    }

    // MARK: - ContentManager

    func dataSource(for tableView: UITableView) -> UITableViewDataSource {
        return self
    }

    func delegate(for tableView: UITableView) -> UITableViewDelegate {
        return self
    }

    func updateData(_ viewModels: [{{ custom_parameters.cell }}CellViewModelProtocol]) {
        guard let tableView = tableView else {
            return
        }
        controllers = controllersFactory.controllers(with: viewModels, tableView: tableView)
        tableView.reloadData()
    }
}

// MARK: - UITableViewDelegate

extension {{ prefix }}{{ module_info.name }}ContentManagerImplementation: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return controllers[indexPath.row].cellSize(reusableCellHolder: tableView).height
    }
}

// MARK: - UITableViewDataSource

extension {{ prefix }}{{ module_info.name }}ContentManagerImplementation: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return controllers.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = controllers[indexPath.row].cellFromReusableCellHolder(tableView, forIndexPath: indexPath)
        return cell
    }
}
