{% include 'header' %}

import Swinject

// MARK: - {{ custom_parameters.cell }}CellControllerFactoryImplementation

class {{ custom_parameters.cell }}CellControllerFactoryImplementation {

	// MARK: - Properties
    
    /// DI container instance
    fileprivate let container: Container
    
    // MARK: - Initializers
    
    /// Default initializer
    ///
    /// - Parameter container: DI container instance
    init(container: Container) {
        self.container = container
    }
}

// MARK: - {{ custom_parameters.cell }}CellControllerFactory

extension {{ custom_parameters.cell }}CellControllerFactoryImplementation: {{ custom_parameters.cell }}CellControllerFactory {

    func controller(with viewModel: {{ custom_parameters.cell }}CellViewModelProtocol, tableView: UITableView) -> {{ custom_parameters.cell }}CellController {
        {{ custom_parameters.cell }}CellController.registerCell(on: tableView)
        let feedRouter = container.resolve(FeedRouterInput.self).unwrap()
        return {{ custom_parameters.cell }}CellController(viewModel: viewModel, {{ module_info.name | downcase }}Router: {{ module_info.name | downcase }}Router)
    }
}
