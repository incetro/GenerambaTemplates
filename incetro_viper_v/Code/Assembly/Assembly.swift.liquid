{% include 'header' %}
// swiftlint:disable unused_closure_parameter
// swiftlint:disable closure_parameter_position

import UIKit
import Swinject
import TransitionHandler

// MARK: - {{ prefix }}{{ module_info.name }}ModuleAssembly

final class {{ prefix }}{{ module_info.name }}ModuleAssembly: CollectableAssembly {

    required init() {

    }

    func obtainView() -> {{ prefix }}{{ module_info.name }}View {
        return container.resolve({{ prefix }}{{ module_info.name }}View.self).unwrap()
    }

    // MARK: - Assembly
    
    func assemble(inContainer container: Container) {

        container.register({{ prefix }}{{ module_info.name }}View.self) { resolver in
            let view = {{ prefix }}{{ module_info.name }}View()
            view.output = resolver.resolve({{ prefix }}{{ module_info.name }}ViewOutput.self, argument: view as {{ prefix }}{{ module_info.name }}ViewInput)
            return view
        }
        
        container.register({{ prefix }}{{ module_info.name }}ViewOutput.self) { (resolver, view: {{ prefix }}{{ module_info.name }}ViewInput) in
            let presenter = {{ prefix }}{{ module_info.name }}Presenter()
            presenter.view = view
            return presenter
        }.initCompleted { (resolver, viewOutput) in
            if let presenter = viewOutput as? {{ prefix }}{{ module_info.name }}Presenter {   
                presenter.interactor = resolver.resolve({{ prefix }}{{ module_info.name }}InteractorInput.self, argument: presenter as {{ prefix }}{{ module_info.name }}InteractorOutput)
            }
        }
        
        container.register({{ prefix }}{{ module_info.name }}InteractorInput.self) { (resolver, interactorOutput: {{ prefix }}{{ module_info.name }}InteractorOutput) in
            let interactor = {{ prefix }}{{ module_info.name }}Interactor()
            interactor.output = interactorOutput
            return interactor
        }
    }
}