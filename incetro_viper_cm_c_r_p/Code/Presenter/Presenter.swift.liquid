{% include 'header' %}

import Foundation

// MARK: - {{ prefix }}{{ module_info.name }}Presenter

final class {{ prefix }}{{ module_info.name }}Presenter {
    
    // MARK: - Properties
    
    /// ModuleOutput instance
    weak var output: {{ prefix }}{{ module_info.name }}ModuleOutput?

    /// View instance
    weak var view: {{ prefix }}{{ module_info.name }}ViewInput?

    /// {{ prefix }}{{ module_info.name }}CellViewModelProtocol factory
    private let {{ custom_parameters.cell | downcase }}CellViewModelDesigner: {{ custom_parameters.cell }}CellViewModelDesigner
    
    /// Current displaying routes
    private var {{ custom_parameters.entities | downcase }}: [{{ custom_parameters.plain }}PlainObject] = []

    /// Interactor instance
    var interactor: {{ prefix }}{{ module_info.name }}InteractorInput?

    /// Router instance
    var router: {{ prefix }}{{ module_info.name }}RouterInput?
    
    // MARK: - Initializers

    /// Default initializer
    ///
    /// - Parameter {{ custom_parameters.cell | downcase }}CellViewModelDesigner: {{ custom_parameters.cell }}CellViewModelProtocol factory
    init({{ custom_parameters.cell | downcase }}CellViewModelDesigner: {{ custom_parameters.cell }}CellViewModelDesigner) {
        self.{{ custom_parameters.cell | downcase }}CellViewModelDesigner = {{ custom_parameters.cell | downcase }}CellViewModelDesigner
    }

    // MARK - Private

    private func add({{ custom_parameters.entities | downcase }}: [{{ custom_parameters.plain }}PlainObject]) {
        self.{{ custom_parameters.entities | downcase }}.append(contentsOf: {{ custom_parameters.entities | downcase }})
        let viewModels = routeCellViewModelDesigner.viewModels(fromRoutes: self.{{ custom_parameters.entities | downcase }})
        view?.update(viewModels)
    }
}

// MARK: - {{ prefix }}{{ module_info.name }}ViewOutput

extension {{ prefix }}{{ module_info.name }}Presenter: {{ prefix }}{{ module_info.name }}ViewOutput {
    
    func didTriggerViewReadyEvent() {
        view?.setupInitialState()
    }

    func didTriggerReloadRoutesEvent() {
        {{ custom_parameters.entities | downcase }}.removeAll()
        interactor?.obtain{{ custom_parameters.entities }}()
    }

    func didTriggerLoadNextPageEvent() {
        interactor?.obtainNextPage()
    }
}

// MARK: - {{ prefix }}{{ module_info.name }}InteractorOutput

extension {{ prefix }}{{ module_info.name }}Presenter: {{ prefix }}{{ module_info.name }}InteractorOutput {
    
    func processErrorMessage(_ errorMessage: String) {
        view?.stopIndication()
        view?.showErrorMessage(errorMessage)
    }

    func obtainRoutesSuccess(routes: [RoutePlainObject], isTotalEmpty: Bool) {
        view?.stopIndication()
        view?.stopPullToRefreshIfNeeded()
        add({{ custom_parameters.entities | downcase }}: {{ custom_parameters.entities | downcase }})
    }

    func pagintaionHasBeenCompleted() {
        view?.setupInfiniteScroll(isEnabled: false)
    }
}

// MARK: - {{ prefix }}{{ module_info.name }}ModuleInput

extension {{ prefix }}{{ module_info.name }}Presenter: {{ prefix }}{{ module_info.name }}ModuleInput {
    
    func setModuleOutput(_ moduleOutput: ModuleOutput) {
        output = moduleOutput as? {{ prefix }}{{ module_info.name }}ModuleOutput
    }
}
