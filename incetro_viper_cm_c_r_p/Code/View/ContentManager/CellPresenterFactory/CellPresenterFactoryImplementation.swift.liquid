{% include 'header' %}

import UIKit
import Swinject

// MARK: - {{ custom_parameters.cell }}CellPresenterFactoryImplementation

final class {{ custom_parameters.cell }}CellPresenterFactoryImplementation {

    // MARK: - Properties
    
    /// DI container instance
    private let container: Container

    /// TransitionHandler instance
    private unowned var transitionHandler: TransitionHandler
    
    // MARK: - Initializers
    
    /// Default initializer
    /// - Parameters:
    ///   - container: DI container instance
    ///   - transitionHandler: TransitionHandler instance
    init(container: Container, transitionHandler: TransitionHandler) {
        self.container = container
        self.transitionHandler = transitionHandler
    }
}

// MARK: - {{ custom_parameters.cell }}CellPresenterFactory

extension {{ custom_parameters.cell }}CellPresenterFactoryImplementation: {{ custom_parameters.cell }}CellPresenterFactory {

    func controller(with viewModel: {{ custom_parameters.cell }}CellViewModelProtocol, tableView: UITableView) -> {{ custom_parameters.cell }}CellPresenter {
        {{ custom_parameters.cell }}CellPresenter.registerCell(on: tableView)
        let {{ module_name_uncap }}Router = container.resolve({{ module_info.name }}RouterInput.self, argument: transitionHandler).unwrap()
        return {{ custom_parameters.cell }}CellPresenter(viewModel: viewModel, {{ module_name_uncap }}Router: {{ module_name_uncap }}Router)
    }
}
