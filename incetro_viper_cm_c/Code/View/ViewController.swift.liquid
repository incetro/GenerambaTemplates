{% include 'header' %}

import UIKit
import TransitionHandler

// MARK: - {{ prefix }}{{ module_info.name }}ViewController

final class {{ prefix }}{{ module_info.name }}ViewController: UIViewController {
    
    // MARK: - Properties
    
    /// Table with {{ custom_parameters.cell }} cells
    private let tableView: UITableView = {
        let tableView = UITableView()
        tableView.separatorStyle = .none
        return tableView
    }()

    /// Presenter instance
    var output: {{ prefix }}{{ module_info.name }}ViewOutput?

    /// {{ prefix }}{{ module_info.name }} content manager
    var contentManager: {{ prefix }}{{ module_info.name }}ContentManager?
    
    // MARK: - ViewController

    override func viewDidLoad() {
    	super.viewDidLoad()
        designer.add(designable: self)
        localizer.add(localizable: self)
        output?.didTriggerViewReadyEvent()
    }

    // MARK: - Private

    /// Cards table view setup
    private func setupTableView() {
        view.addSubview(tableView.prepareForAutolayout())
        tableView.pinToSuperview(withOffset: 0)
        contentManager?.configure(withTableView: tableView)
    }
}

// MARK: - Layout

extension {{ prefix }}{{ module_info.name }}ViewController {

    private func setup() {

    }
}

// MARK: - Actions

extension {{ prefix }}{{ module_info.name }}ViewController {

}

// MARK: - {{ prefix }}{{ module_info.name }}ViewInput

extension {{ prefix }}{{ module_info.name }}ViewController: {{ prefix }}{{ module_info.name }}ViewInput {
    
    func setupInitialState() {   
        setupTableView()
    }
    
    func update(_ viewModels: [{{ custom_parameters.cell }}CellViewModelProtocol]) {
        contentManager?.updateData(viewModels)
    }
}

// MARK: - ViperViewOutputProvider

extension {{ prefix }}{{ module_info.name }}ViewController: ViewOutputProvider {
    var viewOutput: ModuleInput? {
        output as? ModuleInput
    }
}

// MARK: - Localizable

extension {{ prefix }}{{ module_info.name }}ViewController: Localizable {

    func localize(language: Language) {
    }
}

// MARK: - Designable

extension {{ prefix }}{{ module_info.name }}ViewController: Designable {

    func design(appearance: Appearance) {
        let design = appearance.{{ prefix }}{{ module_info.name }}ViewControllerAppearance
        view.backgroundColor = design.backgroundColor
    }
}

// MARK: - Constants

extension {{ prefix }}{{ module_info.name }}ViewController {

    enum Constants {
    }
}